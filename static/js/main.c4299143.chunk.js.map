{"version":3,"sources":["logo.svg","List.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","List","props","items","map","index","key","App","handleSubmit","event","preventDefault","setState","state","todoItem","handleChange","target","value","onSubmit","this","onChange","Component","Api","isLoading","fetch","then","response","json","data","item","name","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"oJAAAA,EAAOC,QAAU,IAA0B,kC,iJCY5BC,MAVf,SAAcC,GACZ,OACE,4BACGA,EAAMC,MAAMC,KAAI,SAACD,EAAOE,GAAR,OACf,wBAAIC,IAAKD,GAAQF,QCDnBI,E,kDACJ,WAAYL,GAAQ,IAAD,8BACjB,cAAMA,IAMRM,aAAe,SAACC,GACdA,EAAMC,iBACN,EAAKC,SAAS,CACZR,MAAM,GAAD,mBAAM,EAAKS,MAAMT,OAAjB,CAAwB,EAAKS,MAAMC,WACxCA,SAAU,MAXK,EAenBC,aAAe,SAACL,GACd,EAAKE,SAAS,CACZE,SAAUJ,EAAMM,OAAOC,SAfzB,EAAKJ,MAAQ,CACXC,SAAU,GACVV,MAAO,IAJQ,E,qDAqBjB,OACE,6BACE,0BAAMc,SAAUC,KAAKV,cACnB,2BAAOQ,MAAOE,KAAKN,MAAMC,SAAUM,SAAUD,KAAKJ,eAClD,wCAEF,kBAAC,EAAD,CAAMX,MAAOe,KAAKN,MAAMT,a,GA5BdiB,aAsEHC,E,kDA/Bb,WAAYnB,GAAQ,IAAD,8BACjB,cAAMA,IACDU,MAAQ,CACXT,MAAO,GACPmB,WAAW,GAJI,E,gEAQE,IAAD,OAClBC,MAAM,8CACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAU,EAAKhB,SAAS,CAAER,MAAOwB,EAAML,WAAW,S,+BAElD,IAAD,EACsBJ,KAAKN,MAA1BT,EADD,EACCA,MAER,OAHO,EACQmB,UAGN,4CAGP,6BACE,kBAAC,EAAD,MACA,4BACGnB,EAAMC,KAAI,SAACwB,EAAMvB,GAAP,OACT,wBAAIC,IAAKD,GAAQuB,EAAKC,e,GAzBhBT,aC/BEU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlB,MAAK,SAAAmB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c4299143.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\r\n\r\nfunction List(props) {\r\n  return (\r\n    <ul>\r\n      {props.items.map((items, index) => (\r\n        <li key={index}>{items}</li>\r\n      ))}\r\n    </ul>\r\n  );\r\n}\r\n\r\nexport default List;\r\n","import React, { Component } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport List from \"./List\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      todoItem: \"\",\n      items: [],\n    };\n  }\n  handleSubmit = (event) => {\n    event.preventDefault();\n    this.setState({\n      items: [...this.state.items, this.state.todoItem],\n      todoItem: \"\",\n    });\n  };\n\n  handleChange = (event) => {\n    this.setState({\n      todoItem: event.target.value,\n    });\n  };\n  render() {\n    return (\n      <div>\n        <form onSubmit={this.handleSubmit}>\n          <input value={this.state.todoItem} onChange={this.handleChange} />\n          <button>ADD</button>\n        </form>\n        <List items={this.state.items} />\n      </div>\n    );\n  }\n}\n\n// export default App;\n\n// BElajar API React\n\nclass Api extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      items: [],\n      isLoading: true,\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then((response) => response.json())\n      .then((data) => this.setState({ items: data, isLoading: false }));\n  }\n  render() {\n    const { items, isLoading } = this.state;\n\n    if (isLoading) {\n      return <p>Loading......</p>;\n    }\n    return (\n      <div>\n        <App />\n        <ul>\n          {items.map((item, index) => (\n            <li key={index}>{item.name}</li>\n          ))}\n        </ul>\n      </div>\n    );\n  }\n}\nexport default Api;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Api from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Api />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}